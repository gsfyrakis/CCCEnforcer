import uk.ac.ncl.core.*;
import uk.ac.ncl.checker.*;
import uk.ac.ncl.resource.*;
import uk.ac.ncl.model.*;
import uk.ac.ncl.event.*;
import uk.ac.ncl.util.*;
import uk.ac.ncl.state.RopState.ObligationState;
import uk.ac.ncl.state.RopState.RightState;
import uk.ac.ncl.state.RopState.ProhibitionState;
import uk.ac.ncl.rop.Obligation;
import uk.ac.ncl.rop.Prohibition;
import uk.ac.ncl.rop.Right;
import uk.ac.ncl.rop.RopEntity;
import uk.ac.ncl.event.Operation;

import uk.ac.ncl.event.Operation.OperationName;
import uk.ac.ncl.user.User;

import java.util.Date;
import java.util.Calendar;

global RelevanceEngine engine;
global EventLogger logger;
global TimingMonitor timingMonitor;

global Responder responder;
global DateParser dateParser;
global DataChecker dataChecker;

rule "Registration"
    when
       $e:Event (operation.getName() == OperationName.register, status == EventStatus.succeed)
       $user:User(role == "PI")

    then
       System.out.println("Registration rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
       Right uploadData = new Right(new Operation(OperationName.upload, "data", null));
       Right uploadTool = new Right(new Operation(OperationName.upload, "tool", null));
       $user.addRopEntity(uploadData);
       $user.addRopEntity(uploadTool);

       responder.setContractCompliant(true);
       System.out.println("Registration rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end

rule "LargeDataUploadAfterObligationDeadline"
    when
        Date($now : time) from Calendar.getInstance().getTime()
        $user:User(role == "PI")
        $right:Right(state == RightState.granted)
        $obligation:Obligation(state == ObligationState.imposed, deadline.getTime() < $now)

    then
        System.out.println("LargeDataUploadAfterObligationDeadline" + " success rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        System.out.println("now: " + Calendar.getInstance().getTime());
        System.out.println("deadline: " + $obligation.getDeadline().getTime());
        $obligation.setState(ObligationState.violated);
        responder.setContractCompliant(true);
        responder.setMessage("Obligation violated");
        System.out.println("LargeDataUploadAfterObligationDeadline" + " success rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end

rule "DataUpload"
    when
        $e:Event (operation.getName() == OperationName.upload, operation.getType() == "data", status == EventStatus.unChecked)
        Date($now : time) from Calendar.getInstance().getTime()
        $user:User(role == "PI")
        $right:Right(state == RightState.granted)
        not (exists Obligation()) or $obligation:Obligation(state == ObligationState.imposed, deadline.getTime() >= $now)

    then
        System.out.println("DataUpload" + " rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        $right.setState(RightState.executing);

        responder.setContractCompliant(true);
        System.out.println("DataUpload"  + " rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end

rule "LargeDataUploadSuccess"
    when
        $e:Event (operation.getName() == OperationName.upload, operation.getType() == "data", status == EventStatus.succeed)
        $right:Right(state == RightState.executing)
        $user:User(role == "PI")

        eval(dataChecker.getSize(($e.getOperation().getObject())) > 1024*1024)

    then
        System.out.println("LargeDataUploadSuccess" + " success rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        $right.fulfil();
        Obligation addDependency = new Obligation (new Operation(OperationName.addDependency, "data", $e.getOperation().getObject()), dateParser.parse("22/03/2016 12:00:00"));
        Obligation addDependencyTools = new Obligation (new Operation(OperationName.addDependency, "tool", $e.getOperation().getObject()), dateParser.parse("22/03/2016 12:00:00"));

//        Obligation remove = new Obligation (new Operation(OperationName.remove, "data", $e.getOperation().getObject()), dateParser.parse("18/03/2016 17:20:00"));
        Prohibition removeData = new Prohibition (new Operation(OperationName.remove, "data", $e.getOperation().getObject()));
        Prohibition removeTools = new Prohibition (new Operation(OperationName.remove, "tool", $e.getOperation().getObject()));
        $user.addRopEntity(addDependency);
        $user.addRopEntity(addDependencyTools);
        $user.addRopEntity(removeData);
        $user.addRopEntity(removeTools);

        responder.setContractCompliant(true);

        System.out.println("now: " + Calendar.getInstance().getTime());
        System.out.println("deadline: " + addDependency.getDeadline().getTime());
        System.out.println("LargeDataUploadSuccess" + " success rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end

rule "SmallDataUploadSuccess"
dialect "mvel"
    when
        $e:Event (operation.getName() == OperationName.upload, operation.getType() == "data", status == EventStatus.succeed)
        $right:Right(state == RightState.executing)
        $user:User(role == "PI")

        eval(dataChecker.getSize(($e.getOperation().getObject())) <= 1024*1024)

    then
        System.out.println("Small Data Upload Success " + " suceess rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");

        System.out.println("file size: " + dataChecker.getSize($e.getOperation().getObject()));
        $right.fulfil();
        Right download = new Right (new Operation(OperationName.download, "data", $e.getOperation().getObject()));
        Right updatePublication = new Right (new Operation(OperationName.update, "data", $e.getOperation().getObject()), dateParser.parse("18/03/2016 16:12:00"));
        Prohibition remove = new Prohibition (new Operation(OperationName.remove, "data", $e.getOperation().getObject()));
        $user.addRopEntity(updatePublication);
        $user.addRopEntity(remove);
        $user.addRopEntity(download);
        responder.setContractCompliant(true);
        System.out.println("Small Data Upload Success " + " success rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end



rule "DataUploadFail"

    when
       $e:Event (operation.getName() == OperationName.upload, operation.getType() == "data", status == EventStatus.failed)
       $right:Right(state == RightState.executing)
       $user:User(role == "PI")

     then
       System.out.println( "DataUploadFail fail rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
       $right.setState(RightState.granted);
       responder.setContractCompliant(true);
       System.out.println("DataUploadFail fail rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end

rule "ProhibitedDateRemove"

    when
       $e:Event (operation.getName() == OperationName.remove, operation.getType() == "data", status == EventStatus.unChecked)
       $prohibition:Prohibition(state == ProhibitionState.imposed)
       $user:User(role == "PI")

    then
      System.out.println("ProhibitedDateRemove rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
      $prohibition.setState(ProhibitionState.executing);
      responder.setContractCompliant(true);
      System.out.println("ProhibitedDateRemove rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end

rule "ProhibitedDateRemoveSuccess"

    when
       $e:Event (operation.getName() == OperationName.remove, operation.getType() == "data", status == EventStatus.succeed)
       $prohibition:Prohibition(state == ProhibitionState.executing)
       $user:User(role == "PI")

    then
      System.out.println("ProhibitedDateRemoveSuccess success rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
      $prohibition.setState(ProhibitionState.fulfilled);
      Right updatePublication = new Right(new Operation(OperationName.update, "data", $e.getOperation().getObject()));
      Right uploadData = new Right(new Operation(OperationName.upload, "data", null));
      Right uploadTool = new Right(new Operation(OperationName.upload, "project", null));
      Right download = new Right (new Operation(OperationName.download, "data", $e.getOperation().getObject()));
      $user.removeRopEntity(updatePublication);
      $user.removeRopEntity(uploadData);
      $user.removeRopEntity(uploadTool);
      $user.removeRopEntity(download);
      responder.setContractCompliant(true);
      System.out.println("ProhibitedDateRemoveSuccess success rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end


rule "ProhibitedDateRemoveFail"

    when
       $e:Event (operation.getName() == OperationName.remove, operation.getType() == "data", status == EventStatus.failed)
       $prohibition:Prohibition(state == ProhibitionState.executing)
       $user:User(role == "PI")

    then
      System.out.println("Prohibited "+$e.getOperation().getName()+ " fail rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
      $prohibition.setState(ProhibitionState.imposed);
      responder.setContractCompliant(true);
      System.out.println("Prohibited "+$e.getOperation().getName()+ " fail rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end


rule "AddDependency"

   when
       $e:Event (operation.getName() == OperationName.addDependency, operation.getType() == "data", status == EventStatus.unChecked)
       $obligation:Obligation(state == ObligationState.imposed)
       $user:User(role == "PI")

   then
       System.out.println("Add dependency rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
       $obligation.setState(ObligationState.executing);
       responder.setContractCompliant(true);
       System.out.println("Add dependency rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end

rule "AddDependencySuccess"

   when
       $e:Event (operation.getName() == OperationName.addDependency, operation.getType() == "data", status == EventStatus.succeed)
       $obligation:Obligation(state == ObligationState.executing)
       $user:User(role == "PI")

   then
       System.out.println("AddDependencySuccess rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
       $obligation.setState(ObligationState.fulfilled);
       responder.setContractCompliant(true);
       System.out.println("AddDependencySuccess rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end

rule "AddDependencyFail"

   when
       $e:Event (operation.getName() == OperationName.addDependency, operation.getType() == "data", status == EventStatus.failed)
       $obligation:Obligation(state == ObligationState.executing)
       $user:User(role == "PI")

   then
       System.out.println("AddDependencyFail fail rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
       $obligation.setState(ObligationState.imposed);
       responder.setContractCompliant(true);
       System.out.println("AddDependencyFail fail rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end

rule "DataRemove"

    when
        $e:Event (operation.getName() == OperationName.remove, operation.getType() == "data", status == EventStatus.unChecked)
        $obligation:Obligation(state == ObligationState.imposed)
        eval(dataChecker.checkDependency($e.getOperation().getObject()))
        //eval(dateParser.calculate(dataChecker.getLastVisit($e.getOperation().getObject()))> 365)
        eval($e.getUsername().equals(dataChecker.getUser($e.getOperation().getObject())))
        $user:User(role == "PI")
    then
       System.out.println("DAtaRemove rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
       $obligation.setState(ObligationState.executing);
       responder.setContractCompliant(true);
       System.out.println("DataRemove rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end

rule "DataRemoveSuccess"

    when
       $e:Event (operation.getName() == OperationName.remove, operation.getType() == "data", status == EventStatus.succeed)
       $obligation:Obligation(state == ObligationState.executing)
       $user:User(role == "PI")

    then
      System.out.println( "DataREmoveSuccess success rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
      $obligation.setState(ObligationState.fulfilled);
      Obligation addDependency = new Obligation (new Operation(OperationName.addDependency, "data", $e.getOperation().getObject()), null);
      $user.removeRopEntity(addDependency);
      responder.setContractCompliant(true);
      System.out.println("DataRemoveSuccess success rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end

rule "DataRemoveFail"

    when
       $e:Event (operation.getName() == OperationName.remove, operation.getType() == "data", status == EventStatus.failed)
       $obligation:Obligation(state == ObligationState.executing)
       $user:User(role == "PI")

    then
      System.out.println("DataRemoveFail fail rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
      $obligation.setState(ObligationState.imposed);
      responder.setContractCompliant(true);
      System.out.println("DataRemoveFail fail rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end

rule "Update"

    when
       $e:Event (operation.getName() == OperationName.update, operation.getType() == "data", status == EventStatus.unChecked)
       $right:Right(state == RightState.granted)
       $user:User(role == "PI")

    then
       System.out.println("UPdate  rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
	   $right.setState(RightState.executing);
       responder.setContractCompliant(true);
       System.out.println("Update rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end

rule "UpdateSuccess"

    when
       $e:Event (operation.getName() == OperationName.update, operation.getType() == "data", status == EventStatus.succeed)
       $right:Right(state == RightState.executing)
       $user:User(role == "PI")

    then
       System.out.println( "UpdateSuccess success rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
       $right.fulfil();
       responder.setContractCompliant(true);
       System.out.println("UpdateSuccess success rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end

rule "UpdataFail"

   when
       $e:Event (operation.getName() == OperationName.update, operation.getType() == "data", status == EventStatus.failed)
       $right:Right(state == RightState.executing)
       $user:User(role == "PI")
   then
       System.out.println( "UpdateFail fail rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
       $right.setState(RightState.granted);
       responder.setContractCompliant(true);
       System.out.println("UpdateFail fail rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
end

//rule "Download"
//
//   when
//       $e:Event (operation.getName() == OperationName.download, operation.getType() == "data", status == EventStatus.unChecked)
//       $right:Right(state == RightState.granted)
//       $user:User(role == "PI")
//
//   then
//       System.out.println("Download  rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
//       $right.setState(RightState.executing);
//       responder.setContractCompliant(true);
//       System.out.println("Download rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
//end
//
//rule "DownloadSuccess"
//
//   when
//       $e:Event (operation.getName() == OperationName.download, operation.getType() == "data", status == EventStatus.succeed)
//       $right:Right(state == RightState.executing)
//       $user:User(role == "PI")
//
//   then
//       System.out.println( "DownloadSuccess success rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
//       $right.fulfil();
//       responder.setContractCompliant(true);
//       System.out.println("DownloadSuccess success rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
//end
//
//rule "DownloadFail"
//
//   when
//       $e:Event (operation.getName() == OperationName.download, operation.getType() == "data", status == EventStatus.failed)
//       $right:Right(state == RightState.executing)
//       $user:User(role == "PI")
//
//   then
//       System.out.println("DownloadFail fail rule is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
//       $right.setState(RightState.granted);
//       responder.setContractCompliant(true);
//       System.out.println("DownloadFail fail rule is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
// end
//
//rule "ToolUpload"
//
//   when
//      $e:Event (operation.getName() == OperationName.upload, operation.getType() == "tool", status == EventStatus.unChecked)
//      $right:Right(state == RightState.granted)
//      $user:User(role == "PI")
//
//   then
//      System.out.println($e.getOperation().getName()+ "  rule for tool is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
//      $right.setState(RightState.executing);
//      responder.setContractCompliant(true);
//      System.out.println($e.getOperation().getName()+" rule for tool is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
//end
//
//rule "ToolUploadSuccess"
//
//   when
//      $e:Event (operation.getName() == OperationName.upload, operation.getType() == "tool", status == EventStatus.succeed)
//      $right:Right(state == RightState.executing)
//      $user:User(role == "PI")
//
//   then
//      System.out.println($e.getOperation().getName()+ "  success rule for tool is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
//      $right.fulfil();
//      responder.setContractCompliant(true);
//      System.out.println($e.getOperation().getName()+" success rule for tool is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
//end
//
//rule "ToolUploadFail"
//
//   when
//      $e:Event (operation.getName() == OperationName.upload, operation.getType() == "tool", status == EventStatus.failed)
//      $right:Right(state == RightState.executing)
//      $user:User(role == "PI")
//
//   then
//      System.out.println($e.getOperation().getName()+ "  success rule for tool is triggered!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
//      $right.setState(RightState.granted);
//      responder.setContractCompliant(true);
//      System.out.println($e.getOperation().getName()+" success rule for tool is done!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
//end
